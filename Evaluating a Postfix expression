//Enter a postfix expression containing numbers from 0-9 and operators "+", "-", "*", "/"
#include <stdio.h>
#include <string.h>
int top = -1, stack[100];
void push(int);
int pop();
int eval(char, int, int);
void main() {
    char a[50], ch;
    int i, op1, op2, res, x;
    printf("Enter a postfix expression: ");
    fgets(a, sizeof(a), stdin);
    // Remove newline character if present
    a[strcspn(a, "\n")] = '\0';
    // Process the postfix expression
    for (i = 0; a[i] != '\0'; i++) {
        ch = a[i];
        // If the character is a digit, push its integer value
        if (ch >= '0' && ch <= '9') {
            push(ch - '0');
        } else {
            // Otherwise, it's an operator; pop two operands and evaluate
            op2 = pop();
            op1 = pop();
            res = eval(ch, op1, op2);
            push(res);
        }
    }
    // Final result is the last item in the stack
    x = pop();
    printf("Evaluated value = %d\n", x);
    getchar();  // Wait for user input before exiting
}
void push(int n) {
    top++;
    stack[top] = n;
}
int pop() {
    int res = stack[top];
    top--;
    return res;
}
int eval(char ch, int op1, int op2) {
    switch (ch) {
        case '+': return (op1 + op2);
        case '-': return (op1 - op2);
        case '*': return (op1 * op2);
        case '/': return (op1 / op2);
        default: return 0;
    }
}
